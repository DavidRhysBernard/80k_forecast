# code for predicting 80000 hours podcast hours in 2020
library(tidyverse)
library(rvest)
library(RSelenium)
library(splitstackshape)
library(lubridate)
### Extract info
#Specifying the url for desired website to be scraped
url <- 'https://podcasts.apple.com/us/podcast/80-000-hours-podcast/id1245002988'
# Download binaries, start driver, and get client object.
rd <- rsDriver(browser = "chrome", port = 4441L, chromever = "83.0.4103.39")
ffd <- rd$client
# Navigate to page.
ffd$navigate('https://podcasts.apple.com/us/podcast/80-000-hours-podcast/id1245002988')
for (i in 1:12){
# Find the load button and assign, then send click event.
load_btn <- ffd$findElement(using = "css selector", ".list-button .link")
load_btn$clickElement()
# Wait for elements to load.
Sys.sleep(2)
}
# Get HTML data
html_data <- ffd$getPageSource()[[1]]
#Reading the HTML code from the website
webpage <- read_html(html_data)
# extracting episodes
episodes <- webpage %>% html_nodes(".tracks__track--podcast") %>% html_text()
### Cleaning data
# sorting into table
episodes <- as_tibble(episodes)
episodes <- cSplit(episodes, "value", "\n")
episodes <- select(episodes, -c(3,5))
colnames(episodes) <- c('date', 'title', 'description', 'length')
#cleaning variables
episodes$date <- mdy(episodes$date)
episodes$title <- as.character(episodes$title)
episodes$description <- as.character(episodes$description)
episodes$length <- as.character(episodes$length)
# keeping only new episodes
episodes <- filter(episodes, str_detect(title, '#'))
episodes <- filter(episodes, !str_detect(title, 'Classic episode'))
# adding '0 hr ' to those less than one hour
episodes$length <- ifelse(!str_detect(episodes$length, "hr"),
str_c("0 hr ", episodes$length), episodes$length)
# in terms of hours
episodes$hours <- hm(episodes$length)
episodes$hours <- hour(episodes$hours) + minute(episodes$hours)/60
for (i in 1:12){
# Find the load button and assign, then send click event.
load_btn <- ffd$findElement(using = "css selector", ".list-button .link")
load_btn$clickElement()
# Wait for elements to load.
Sys.sleep(2)
}
# code for predicting 80000 hours podcast hours in 2020
library(tidyverse)
library(rvest)
library(RSelenium)
library(splitstackshape)
library(lubridate)
### Extract info
#Specifying the url for desired website to be scraped
url <- 'https://podcasts.apple.com/us/podcast/80-000-hours-podcast/id1245002988'
# Download binaries, start driver, and get client object.
rd <- rsDriver(browser = "chrome", port = 4442L, chromever = "83.0.4103.39")
ffd <- rd$client
# Navigate to page.
ffd$navigate('https://podcasts.apple.com/us/podcast/80-000-hours-podcast/id1245002988')
Sys.sleep(5)
for (i in 1:12){
# Find the load button and assign, then send click event.
load_btn <- ffd$findElement(using = "css selector", ".list-button .link")
load_btn$clickElement()
# Wait for elements to load.
Sys.sleep(2)
}
# Get HTML data
html_data <- ffd$getPageSource()[[1]]
#Reading the HTML code from the website
webpage <- read_html(html_data)
# extracting episodes
episodes <- webpage %>% html_nodes(".tracks__track--podcast") %>% html_text()
### Cleaning data
# sorting into table
episodes <- as_tibble(episodes)
episodes <- cSplit(episodes, "value", "\n")
episodes <- select(episodes, -c(3,5))
colnames(episodes) <- c('date', 'title', 'description', 'length')
#cleaning variables
episodes$date <- mdy(episodes$date)
episodes$title <- as.character(episodes$title)
episodes$description <- as.character(episodes$description)
episodes$length <- as.character(episodes$length)
# keeping only new episodes
episodes <- filter(episodes, str_detect(title, '#'))
episodes <- filter(episodes, !str_detect(title, 'Classic episode'))
# adding '0 hr ' to those less than one hour
episodes$length <- ifelse(!str_detect(episodes$length, "hr"),
str_c("0 hr ", episodes$length), episodes$length)
# in terms of hours
episodes$hours <- hm(episodes$length)
episodes$hours <- hour(episodes$hours) + minute(episodes$hours)/60
View(episodes)
getwd()
write_csv(episodes, "episodes.csv")
dat <- read_csv("episodes.csv")
View(dat)
ggplot(dat, aes(x=hours)) + geom_histogram()
?geom_histogram
ggplot(dat, aes(x=hours)) + geom_histogram(bindwidth=0.25)
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25)
View(dat)
summary(dat$hours)
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25)
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, pad = T)
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125)
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125, pad = T)
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125, pad = T) +
coord_cartesian(xlim=c(0,5))
ggplot(dat, aes(x=date, y=hours)) + geom_point()
ggplot(dat, aes(x=date, y=hours)) + geom_point() + theme_minimal()
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125, pad = T) +
coord_cartesian(xlim=c(0,5)) + theme_minimal
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + theme_minimal
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + theme_minimal()
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + scale_y_continuous(breaks=c(0,2,4,8,10,12)) + theme_minimal()
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + scale_y_continuous(breaks=c(0,2,4,6,8,10,12)) + theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() + theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
scale_y_continuous(breaks=c(0,1,2,3,4,5)) +theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
scale_y_continuous(breaks=c(0,1,2,3,4,5)) +theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
coord_cartesian(ylim=c(0,5)) +theme_minimal()
View(dat)
?format
dat %>% mutate(month = format(date, "%m"), year = format(date,%Y))
dat %>% mutate(month = format(date, '%m'), year = format(date, '%Y'))
dat %>% mutate(month = format(date, '%m'), year = format(date, '%Y')) %>%
group_by(month, year) %>%
summarise(total = sum(hours))
monthly <- dat %>%
mutate(month = format(date, '%m'), year = format(date, '%Y')) %>%
group_by(month, year) %>%
summarise(total = sum(hours))
View(monthly)
monthly <- dat %>%
mutate(date2 = format(date, '%Y-%m')) %>%
group_by(month, year) %>%
summarise(total = sum(hours))
monthly <- dat %>%
mutate(date2 = format(date, '%Y-%m')) %>%
group_by(date2) %>%
summarise(total = sum(hours))
View(monthly)
ggplot(monthly, aes(x=date2, y = total)) + geom_point() + theme_minimal()
ggplot(dat, aes(x=date, y=hours)) +geom_line(aes(y=cumsum(hours)))
?sort
?order
order(dat$date)
dat
dat[order(date),]
dat[order(dat$date),]
dat[order(dat$date),]
dat <- dat[order(dat$date),]
View(dat)
ggplot(dat, aes(x=date, y=hours)) +geom_line(aes(y=cumsum(hours)))
dat <- mutate(dat, cum = cumsum(hours))
View(dat)
ggplot(dat, aes(x=date, y=cum)) + geom_line()
lm(cum ~ date, dat)
summary(lm(cum ~ date, dat))
dat$date
ggplot(dat[date<2019-01-01,], aes(x=date, y=cum)) + geom_line() + theme_minimal()
dat$date <2019
dat$date <2019-01-01
dat$date < 2019-01-01
class(dat$date)
dat$date < as.Date('2019-01-01')
ggplot(dat[dat$date < as.Date('2019-01-01'),], aes(x=date, y=cum)) + geom_line() + theme_minimal()
dat <- read_csv("episodes.csv")
dat <- dat[order(dat$date),]
dat <- mutate(dat, cumsum = cumsum(hours))
# monthly data
monthly <- dat %>%
mutate(date2 = format(date, '%Y-%m')) %>%
group_by(date2) %>%
summarise(total = sum(hours))
### graphs
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + scale_y_continuous(breaks=c(0,2,4,6,8,10,12)) +
theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
coord_cartesian(ylim=c(0,5)) + theme_minimal()
# cumulative frequency graph
ggplot(dat, aes(x=date, y=cum)) + geom_line() + theme_minimal()
library(tidyverse)
library(lubridate)
analysis
dat <- read_csv("episodes.csv")
dat <- dat[order(dat$date),]
dat <- mutate(dat, cumsum = cumsum(hours))
# monthly data
monthly <- dat %>%
mutate(date2 = format(date, '%Y-%m')) %>%
group_by(date2) %>%
summarise(total = sum(hours))
### graphs
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + scale_y_continuous(breaks=c(0,2,4,6,8,10,12)) +
theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
coord_cartesian(ylim=c(0,5)) + theme_minimal()
# cumulative frequency graph
ggplot(dat, aes(x=date, y=cum)) + geom_line() + theme_minimal()
### graphs
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + scale_y_continuous(breaks=c(0,2,4,6,8,10,12)) +
theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
coord_cartesian(ylim=c(0,5)) + theme_minimal()
# cumulative frequency graph
ggplot(dat, aes(x=date, y=cumsum)) + geom_line() + theme_minimal()
View(dat)
ggplot(dat, aes(x=date, y=cumsum)) + geom_point() + theme_minimal()
ggplot(dat, aes(x=date, y=cumsum)) + geom_point() + geom_smooth() theme_minimal()
ggplot(dat, aes(x=date, y=cumsum)) + geom_point() + geom_smooth() + theme_minimal()
reg <- lm(cumsum ~ date, dat)
summary(reg)
reg$coefficients[2]
reg$coefficients[2] * 365
ggplot(dat, aes(x=date, y=cumsum)) + geom_point() +
geom_smooth(method = 'lm', formula = cumsum ~ date) + theme_minimal()
ggplot(dat, aes(x=date, y=cumsum)) + geom_point() +
geom_smooth(method = 'lm', formula = y ~ x) + theme_minimal()
max(dat$cumsum)/3
reg20 <- lm(cumsum ~ date, dat[dat$date > as.Date('2020-01-01'),])
reg20$coefficients[2] * 365
ggplot(dat[dat$date < as.Date('2019-01-01'),], aes(x=date, y=cum)) + geom_line() + theme_minimal()reg20$coefficients
reg20$coefficients
summary(reg20)$coefficients
summary(reg20)$coefficients[2,1] + summary(reg20)$coefficients[2,2]
(summary(reg20)$coefficients[2,1] + summary(reg20)$coefficients[2,2]) * 365
(summary(reg20)$coefficients[2,1] + 2*summary(reg20)$coefficients[2,2]) * 365
library(tidyverse)
library(lubridate)
dat <- read_csv("episodes.csv")
dat <- dat[order(dat$date),]
dat <- mutate(dat, cumsum = cumsum(hours))
### graphs
ggplot(dat, aes(x=hours)) + geom_histogram(binwidth=0.25, center = 0.125) +
coord_cartesian(xlim=c(0,5)) + scale_y_continuous(breaks=c(0,2,4,6,8,10,12)) +
theme_minimal()
ggplot(dat, aes(x=date, y=hours)) + geom_point() +
coord_cartesian(ylim=c(0,5)) + theme_minimal()
# cumulative frequency graph
ggplot(dat, aes(x=date, y=cumsum)) + geom_point() +
geom_smooth(method = 'lm', formula = y ~ x) + theme_minimal()
# stats
max(dat$cumsum)/3
reg <- lm(cumsum ~ date, dat)
reg$coefficients[2] * 365
reg20 <- lm(cumsum ~ date, dat[dat$date > as.Date('2020-01-01'),])
reg20$coefficients[2] * 365
(summary(reg20)$coefficients[2,1] + 2*summary(reg20)$coefficients[2,2]) * 365
